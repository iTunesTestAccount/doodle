---
title:       collectors
created_at:  2008-08-02 14:06:40.000000 -06:00
filter:
  - erb
  - wikilinks
  - creole
---
== <%= @page.title %>

Collectors provide a means to define a convenience method you can use to add items to a collection. For example:

<<< ruby
class Location < Doodle
  has :name
end
class Event < Doodle
  has :locations, :collect => Location
end

event = Event do
  location "Stage 1"
  location "Stage 2"
end
>>>

In the example above, we want @locations@ to be an array of @Location@ objects. Using the

<<< ruby
:collect => Location
>>>

option defines a method called @location@ (derived from the class name). Each time the @location@ method is called a new @Location@ object is added to the @locations@ array.

If the class hasn't been defined yet, you can use a Symbol or String to name the class:

<<< ruby
:collect => :Location
>>>

To use a specific name for the collecting method, pass a hash containing

<<< ruby
{:method_name => ClassName}
>>>

to the @collect@ option like this:

<<< ruby
has :locations, :collect => {:place => Location}
...
event = Event do
  place "Stage 1"
  place "Stage 2"
end
>>>

@ClassName@ can be a ClassConstant, a :Symbol or a "String".

If you don't want to restrict the value to a particular class, you can just specify a method name:

<<< ruby
has :locations, :collect => :place
...
event = Event do
  place "Stage 1"
  place 42
end
>>>

=== defining multiple collectors for the same collection

You can specify more than one class in the {{{:collect}}} clause. For example, given these definitions:

<<< ruby
class ::Shape < Doodle
  has :x
  has :y
end
class ::Circle < Shape
  has :radius
end
class ::Square < Shape
  has :size
end
>>>

you can define a generic collector like this:

<<< ruby
class ::Canvas < Doodle
  has :shapes, :collect => [Circle, Square]
end
>>>

or like this:

<<< ruby
class ::Canvas < Doodle
  has :shapes, :collect => { :circle => Circle, :square => Square }
end
>>>

In both cases, the {{{circle}}} and {{{square}}} methods will add items to the {{{shapes}}} collection:

<<< xmp sections: use
require 'doodle'
require 'pp'
#:define
class ::Shape < Doodle
  has :x
  has :y
end
class ::Circle < Shape
  has :radius
end
class ::Square < Shape
  has :size
end
class ::Canvas < Doodle
  has :shapes, :collect => [Circle, Square]
end
#:use
canvas = Canvas do
  circle 10,10,5
  square 20,30,40
end
pp canvas
>>>

=== keyed collections

You can also build keyed collections using @:collect@. Use

<<< ruby
:key => :method_name
>>>

to tell doodle which method to call on the collected object to provide a key. If you don't specify an @:init@ value, doodle will create a hash to hold the collected items. For example:

<<< ruby
class Item < Doodle
  has :name
  has :value
end
class Foo < Doodle
  has :list, :collect => Item, :key => :name
end
foo = Foo do
  item 'A', 1
  item 'B', 2
end
foo.list['A'] # => #<Item:0xb7cf76ac @value=1, @name="A">
>>>

If you ~do~ specify an @:init@ value, it should provide a <tt>#[]</tt> method that accepts the type of the @:key@ specified.

== using your own collection types

=== array-like collectors

To collect into something other than an @Array@, use the @:init@ option. You need to supply an instance of an Enumerable that provides the {{{<<}}}, {{{clone}}} and {{{replace}}} methods.

<<< xmp filename: eg-string-collector.rb, sections: [definition, use] >>>

=== hash-like collectors

To collect into something other than an @Hash@, use the @:init@ option. You need to supply an instance of an Hash-like class that provides the {{{[]=}}}, {{{[]}}}, {{{key}}} methods.
