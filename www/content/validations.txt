---
title:       validations
created_at:  2008-08-02 14:06:40.000000 -06:00
filter:
  - erb
  - wikilinks
  - creole
---
== <%= @page.title %>

=== by kind

<<< xmp filename: eg-validations1.rb, sections: definitions >>>

Doodle uses @kind_of?@ to test the value, so @kind@ can be set to any module (e.g. @Enumerable@), class or superclass that makes sense for your application.

If you now try to initialize @Event#date@ with something that isn't a @Date@:

<<< xmp filename: eg-validations1.rb, sections: use >>>

you'll get a @Doodle::ValidationError@ exception:

<<< xmp filename: eg-validations1.rb, sections: output >>>

=== attribute validations using @must@

To specify a validation on an attribute, use @must@ inside the attribute's definition block:

<<< xmp filename: eg-validations2.rb, sections: all >>>

The @must@ block should return @true@ if the value is valid, @false@ otherwise. A failed validation will raise a @Doodle::ValidationError@ exception.

Attribute validations happen ~before~ the instance variable is changed.

=== instance level validations

You can also specify validations for the object as a whole:

<<< xmp filename: eg-validations3.rb, sections: all >>>

Note that you don't need to project the value into the block but you can if you like - its value is the object instance itself.

Object level validations occur ~after~ all instance variables have been set.

=== validating yaml data

See [[./yaml.html#validating-yaml|validating data loaded from a yaml source]].

