---
title:       validations
created_at:  2008-08-02 14:06:40.000000 -06:00
filter:
  - erb
  - wikilinks
  - creole
---
== <%= @page.title %>

=== by kind

<<< xmp filename: eg-validations1.rb, sections: definitions >>>

Doodle uses @kind_of?@ to test the value, so @kind@ can be set to any module (e.g. @Enumerable@), class or superclass that makes sense for your application.

If you now try to initialize @Event#date@ with something that isn't a @Date@:

<<< xmp filename: eg-validations1.rb, sections: use >>>

you'll get a @Doodle::ValidationError@ exception:

<<< xmp filename: eg-validations1.rb, sections: output >>>

=== attribute validations using @must@

To specify a validation on an attribute, use @must@ inside the attribute's definition block:

<<< xmp filename: eg-validations2.rb, sections: all >>>

The @must@ block should return @true@ if the value is valid, @false@ otherwise. A failed validation will raise a @Doodle::ValidationError@ exception.

Attribute validations happen ~before~ the instance variable is changed.

=== instance level validations

You can also specify validations for the object as a whole:

<<< xmp filename: eg-validations3.rb, sections: all >>>

Note that you don't need to project the value into the block but you can if you like - its value is the object instance itself.

Object level validations occur ~after~ all instance variables have been set.

=== deferring validation with {{{doodle.update}}}

Sometimes you need to update attributes in a way that would temporarily cause the object state to be invalid.

The following class definition has two object level validations defined with {{{must}}}:

<< xmp filename: dude.rb, sections: definition >>

If you try to simply update an attribute in such a way as to cause the instance to be invalid, Doodle will throw an exception:

<< xmp filename: dude-exception.rb, sections: eg5 >>

Using {{{object.doodle.update}}}, you can temporarily set attributes to values which would invalidate the object:

<< xmp filename: dude-update.rb, sections: eg1 >>

Values set in the block will override values set in the argument list:

<< xmp filename: dude-update.rb, sections: eg2 >>

Of course, if the object is invalid at the end of the block, Doodle will raise an exception:

<< xmp filename: dude-exception2.rb, sections: eg6 >>

You can't escape individual attribute validations:

<< xmp filename: dude-update.rb, sections: eg3 >>

i.e. Doodle will not allow you to set an individual attribute to an invalid value for that attribute, even temporarily.

However if you capture the exception, {{{update}}} will not prevent you from invalidating the whole ~object~:

<< xmp filename: dude-update.rb, sections: eg4 >>

=== validating yaml data

See [[./yaml.html#validating-yaml|validating data loaded from a yaml source]].

